#include <Arduino.h>
#if CONFIG_FREERTOS_UNICORE
static const u_int8_t app_core = 0;
#else
static const uint8_t app_core = 1;
#endif

TaskHandle_t rSer;
TaskHandle_t wSer;
static volatile uint8_t msgFlag = 0;
static const uint8_t bufLen = 255;
char *msg = NULL;


void readSerial(void *params){
    
    char c;
    char buffer[bufLen];
    memset(buffer,0,bufLen);
    uint8_t  i = 0; 
    buffer[i++] = 'a';
    for(;;){
        if (Serial.available()>0)
        {
            c = Serial.read();
            if(i==bufLen){
                i=0;
                Serial.println("out of chars, input resetting now.");
                memset(buffer,0,bufLen);
            }
            switch (c) 
            {
            case '\n':
               if (msgFlag==0)
               {
                buffer[i] = '\0';
                msg = (char *)pvPortMalloc((i+1)*sizeof(char));
                Serial.println("msg :");
                configASSERT(msg);
                memcpy(msg,buffer,(i+1));
                memset(buffer,0,(i+2));
                i=0;
                msgFlag = 1;
               }               
                break;
            case '5':
                Serial.println(buffer);
                break;            
            default:
                buffer[i++] = c;
                break;
            }
        }
        
    }
}


void writeSerial(void *params){
    for(;;){
        if(msgFlag==1){
            Serial.println(msg);
            vPortFree(msg);
            msg=NULL;
            msgFlag=0;   
        }
    }
}



void setup()
{
    Serial.begin(115200);
    xTaskCreatePinnedToCore(
        readSerial,
        "Read serial",
        1500,
        NULL,
        1,
        &rSer,
        app_core);
    xTaskCreatePinnedToCore(
        writeSerial,
        "Write Serial",
        1024,
        NULL,
        1,
        &wSer,
        app_core);
}

void loop()
{

}