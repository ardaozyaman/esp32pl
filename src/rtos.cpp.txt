#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <HX711_ADC.h>
#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

#define SERVICE_UUID_1 "4fafc201-1fb5-459e-8fcc-c5c9c3319141"
#define Speed_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a1"
#define Duration_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a2"
#define Step_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a3"
#define Pos_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a4"

#define SERVICE_UUID_2 "4fafc201-1fb5-459e-8fcc-c5c9c3319142"
#define LoadCell_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a4"
#define Exercise_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a5"
#define CHARACTERISTIC_UUID_2_3 "beb5483e-36e1-4688-b7f5-ea07361b26a6"

#define props BLECharacteristic::PROPERTY_NOTIFY | BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_WRITE_NR

#define seconds() millis() / 1000
// Hx711 Pinler
#define DOUT 16
#define SCK 17
// Sürücü Pinler
#define stepPin 18
#define dirPin 19

#define cw 1
#define ccw -1

#define speedOffset_L 250
#define speedOffset_H 5000

BLEServer *pServer = NULL;

BLEService *SetupService = NULL;
BLEService *pService2 = NULL;

BLECharacteristic *Speed_Ctsc = NULL;
BLECharacteristic *Duration_Ctsc = NULL;
BLECharacteristic *Step_Ctsc = NULL;
BLECharacteristic *Pos_Ctsc = NULL;

BLECharacteristic *LoadCell_Ctsc = NULL;
BLECharacteristic *Exercise_Ctsc = NULL;
BLECharacteristic *pCharacteristic2_3 = NULL;

static TaskHandle_t readFromBle_handle;
static TaskHandle_t writeToBle_handle;
static TaskHandle_t readLoadCell_handle;
static TaskHandle_t stepperRun_handle;

static SemaphoreHandle_t dur_smp;
static SemaphoreHandle_t speed_smp;
static SemaphoreHandle_t step_smp;
static SemaphoreHandle_t pos_smp;
static SemaphoreHandle_t ex_smp;
static SemaphoreHandle_t exBLE_smp;

QueueHandle_t speedFromBle_Que;
QueueHandle_t runStepperFromBle_Que;

static uint16_t StepperSpeed;

static long position1 = 0;
static long position2 = 0;
static long currentPosition = 0;
static long lastPosition = 0;

static long stepStartTime = 0;
static long stepEndTime = 0;
static long stepCurrentTime = 0;
static int currentDir = 0;

static uint8_t posFlag = 0;

static bool exercise = false;

static int loadCellVal = 0;

static int duration;

static bool deviceConnected = false;

HX711_ADC loadCell(DOUT, SCK);

String stdToStr(std::string stdStr)
{
  return stdStr.c_str();
}

int stdToInt(std::string stdStr)
{
  return stdToStr(stdStr).toInt();
}

std::string strToStd(String str)
{
  return std::string((str.c_str()));
}

void runStepper(uint16_t speed, int direction)
{
  ledcChangeFrequency(0, speed, 8);
  if (direction == cw)
  {
    currentDir = cw;
    stepStartTime = millis();
    digitalWrite(dirPin, 1);
    ledcAttachPin(stepPin, 0);
  }
  if (direction == ccw)
  {
    currentDir = ccw;
    stepStartTime = millis();
    digitalWrite(dirPin, 0);
    ledcAttachPin(stepPin, 0);
  }
  Serial.println("stepped");
}
void stopStepper(uint16_t speed, int direction)
{
  ledcDetachPin(stepPin);
  stepEndTime = millis();
  currentPosition += ((stepEndTime - stepStartTime) * speed) * direction;
  lastPosition = currentPosition;
  Serial.print("Stopped : ");
  Serial.print((stepEndTime - stepStartTime));
  Serial.print("\t");
  Serial.println(currentPosition);
}

void savePos(int p)
{
  if (p == 1)
  {
    position1 = currentPosition;
  }
  else if (p == 2)
  {
    position2 = currentPosition;
  }

  Serial.print(currentPosition);
  Serial.print(": pos");
  Serial.println(p);
}

void setSpeed(int speed)
{
  if (speed >= speedOffset_L && speed <= speedOffset_H)
  {
    StepperSpeed = speed;
    ledcChangeFrequency(0, speed, 8);
  }
}

int getLoadCellVal(int vector)
{
  if (loadCell.update())
  {
    loadCellVal = loadCell.getData() * vector;
  }
  return loadCellVal;
}

void stepperStart(long p1, long p2) // iki konum arasında sweep olmadan çağrılamalı
{
  if (currentPosition == p1)
  {
    posFlag = 1;
    if (p1 > p2)
    {
      currentDir = ccw;
    }
    else if (p2 > p1)
    {
      currentDir = cw;
    }
  }
  else if (currentPosition == p2)
  {
    posFlag = 2;
    if (p2 > p1)
    {
      currentDir = ccw;
    }
    else if (p1 > p2)
    {
      currentDir = cw;
    }
  }
  runStepper(StepperSpeed, currentDir);
}

void stepperDirHandler(long p1, long p2) // sürekli çağırılmalı egzersiz sırasında
{
  currentPosition = ((millis() - stepStartTime) * StepperSpeed * currentDir) + lastPosition;
  if (posFlag == 1)
  {
    if (p1 > p2)
    {
      if (currentPosition <= p2)
      {
        currentDir *= -1;
        stepStartTime = millis();
        lastPosition = currentPosition;
        digitalWrite(dirPin, !digitalRead(dirPin));
        posFlag = 2;
      }
    }
    else if (p2 > p1)
    {
      if (currentPosition >= p2)
      {
        currentDir *= -1;
        stepStartTime = millis();
        lastPosition = currentPosition;
        digitalWrite(dirPin, !digitalRead(dirPin));
        posFlag = 2;
      }
    }
  }
  else if (posFlag == 2)
  {

    if (p2 > p1)
    {
      if (currentPosition <= p1)
      {
        currentDir *= -1;
        stepStartTime = millis();
        lastPosition = currentPosition;
        digitalWrite(dirPin, !digitalRead(dirPin));
        posFlag = 1;
      }
    }
    else if (p2 < p1)
    {
      if (currentPosition >= p1)
      {
        currentDir *= -1;
        stepStartTime = millis();
        lastPosition = currentPosition;
        digitalWrite(dirPin, !digitalRead(dirPin));
        posFlag = 1;
      }
    }
  }
}

class StepCtscCallBacks : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *Step_Ctsc)
  {
    Serial.println("yazıldı Step_Ctsc");
    xSemaphoreGive(step_smp);
  }

  void onRead(BLECharacteristic *Step_Ctsc)
  {
    Serial.println("okundu Step_Ctsc");
  }
};

class DurationCtscCallBacks : public BLECharacteristicCallbacks
{
  void onWrite(BLECharacteristic *Duration_Ctsc)
  {
    xSemaphoreGive(dur_smp);
  }

  void onRead(BLECharacteristic *Duration_Ctsc)
  {
    Serial.println("Okundu Duration");
  }
};

class PosCtscCallBacks : public BLECharacteristicCallbacks
{

  void onWrite(BLECharacteristic *Pos_Ctsc)
  {
    Serial.println("yazıldı Pos_Ctsc");
    xSemaphoreGive(pos_smp);
  }

  void onRead(BLECharacteristic *Pos_Ctsc)
  {
    Serial.println("okundu Speed_Ctsc");
  }
};
class SpeedCtscCallBacks : public BLECharacteristicCallbacks
{

  void onWrite(BLECharacteristic *Speed_Ctsc)
  {
    Serial.println("yazıldı Speed_Ctsc");
    xSemaphoreGive(speed_smp);
  }

  void onRead(BLECharacteristic *Speed_Ctsc)
  {
    Serial.println("okundu Speed_Ctsc");
  }
};

class ExerciseCtscCallBacks : public BLECharacteristicCallbacks
{

  void onWrite(BLECharacteristic *Exercise_Ctsc)
  {
    Serial.println("yazıldı Exercise_Ctsc");
    xSemaphoreGive(exBLE_smp);
  }

  void onRead(BLECharacteristic *Exercise_Ctsc)
  {
    Serial.println("okundu Exercise_Ctsc");
  }
};

class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
    Serial.println("Connected.");
  };

  void onDisconnect(BLEServer *pServer)
  {
    Serial.println("Disconnected.");
    deviceConnected = false;
    Serial.println("Re-Advertising.");

    pServer->startAdvertising();
  }
};

void readFromBle(void *params)
{
  Serial.println("rBle");
  String checker = "0";
  int posBuf = 0;
  while (1)
  {
    if (xSemaphoreTake(dur_smp, 0) == pdTRUE)
    {
      duration = stdToInt(Duration_Ctsc->getValue());
    }

    if (xSemaphoreTake(speed_smp, 0) == pdTRUE)
    {
      StepperSpeed = stdToInt(Speed_Ctsc->getValue());
    }

    if (xSemaphoreTake(step_smp, 0) == pdTRUE)
    {
      checker = stdToStr(Step_Ctsc->getValue());
      if (checker == "1")
      {
        currentDir = cw;
        runStepper(StepperSpeed, currentDir);
      }
      else if (checker == "2")
      {
        currentDir = ccw;
        runStepper(StepperSpeed, currentDir);
      }
      else if (checker == "0")
      {
        stopStepper(StepperSpeed, currentDir);
      }
      else if (checker == "RunF")
      {
        Serial.println(currentPosition);
      }
    }
    if (xSemaphoreTake(pos_smp, 0))
    {
      posBuf = stdToInt(Pos_Ctsc->getValue());
      if (posBuf == 1)
      {
        savePos(1);
      }
      else if (posBuf == 2)
      {
        savePos(2);
      }
    }
  }
}
bool cntrl = false;
void writeToBle(void *params)
{
  while (1)
  {
    /*vTaskDelay(10000 / portTICK_PERIOD_MS);
    Step_Ctsc->setValue("0");
    xSemaphoreGive(step_smp);*/
    if (cntrl)
    {
      stepperDirHandler(position1, position2);
      Serial.println(currentPosition);
    }else{      
      vTaskDelay(10/portTICK_PERIOD_MS);
    }
  }
}

void readLoadCell(void *params)
{
  while (1)
  {
    LoadCell_Ctsc->setValue(std::to_string(getLoadCellVal(1)));
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
}

void taskHandler(void *params)
{
  while (1)
  {

    if (Serial.available() > 0)
    {
      char c = Serial.read();
      switch (c)
      {
      case 'w':
        runStepper(StepperSpeed, cw);
        break;
      case 's':
        runStepper(StepperSpeed, ccw);
        break;
      case 'a':
        savePos(1);
        break;
      case 'd':
        savePos(2);
        break;
      case 'q':
        stepperStart(position1, position2);
        cntrl= true;
        break;
      case 'e':
        cntrl= false;
        Serial.println("egzersiz Bitti");
        break;
      case 'x':
        stopStepper(StepperSpeed, currentDir);
        break;
      default:

        break;
      }
    }
  }
}
/*



*/
void setup()
{
  Serial.begin(115200);
  Serial.println("Esp runing.");

  pinMode(dirPin, OUTPUT);
  pinMode(stepPin, OUTPUT);
  setSpeed(1000);
  ledcSetup(0, 10, 8);
  ledcWrite(0, 127);

  loadCell.begin();
  loadCell.start(1000);
  loadCell.setCalFactor(28);

  BLEDevice::init("RoboFizz");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  SetupService = pServer->createService(SERVICE_UUID_1);
  pService2 = pServer->createService(SERVICE_UUID_2);

  Speed_Ctsc = SetupService->createCharacteristic(Speed_UUID, props);
  Speed_Ctsc->setCallbacks(new SpeedCtscCallBacks());

  Duration_Ctsc = SetupService->createCharacteristic(Duration_UUID, props);
  Duration_Ctsc->setCallbacks(new DurationCtscCallBacks());

  Step_Ctsc = SetupService->createCharacteristic(Step_UUID, props);
  Step_Ctsc->setCallbacks(new StepCtscCallBacks());

  Pos_Ctsc = SetupService->createCharacteristic(Pos_UUID, props);
  Pos_Ctsc->setCallbacks(new PosCtscCallBacks());

  LoadCell_Ctsc = pService2->createCharacteristic(LoadCell_UUID, BLECharacteristic::PROPERTY_READ);
  Exercise_Ctsc = pService2->createCharacteristic(Exercise_UUID, props);
  Exercise_Ctsc->setCallbacks(new ExerciseCtscCallBacks());
  pCharacteristic2_3 = pService2->createCharacteristic(CHARACTERISTIC_UUID_2_3, props);

  SetupService->start();
  pService2->start();

  pServer->startAdvertising();

  dur_smp = xSemaphoreCreateBinary();
  speed_smp = xSemaphoreCreateBinary();
  step_smp = xSemaphoreCreateBinary();
  pos_smp = xSemaphoreCreateBinary();
  ex_smp = xSemaphoreCreateBinary();
  exBLE_smp = xSemaphoreCreateBinary();

  speedFromBle_Que = xQueueCreate(2, sizeof(int));
  runStepperFromBle_Que = xQueueCreate(2, sizeof(int));

  delay(1000);

  xTaskCreatePinnedToCore(
      readFromBle,
      "x",
      2048,
      NULL,
      1,
      &readFromBle_handle,
      app_cpu);

  xTaskCreatePinnedToCore(
      writeToBle,
      "Write to ble",
      2048,
      NULL,
      1,
      &writeToBle_handle,
      app_cpu);

  xTaskCreatePinnedToCore(
      readLoadCell,
      "Read loadCell",
      2048,
      NULL,
      1,
      &readLoadCell_handle,
      app_cpu);

  xTaskCreatePinnedToCore(
      taskHandler,
      "Task Handler",
      2048,
      NULL,
      1,
      NULL,
      app_cpu);
}

void loop()
{
  /* if (deviceConnected)
   {
     // do stuff
   }

   if (!deviceConnected && oldDeviceConnected)
   {
     delay(500); // give the bluetooth stack the chance to get things ready
     pServer->startAdvertising();  // restart advertising
     Serial.println("start advertising");
     oldDeviceConnected = deviceConnected;
   }
   // connecting
   if (deviceConnected && !oldDeviceConnected)
   {
     // do stuff here on connecting
     oldDeviceConnected = deviceConnected;
   }*/
}