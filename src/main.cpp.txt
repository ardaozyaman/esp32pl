/**
 * FreeRTOS LED Demo
 *
 * One task flashes an LED at a rate specified by a value set in another task.
 *
 * Date: December 4, 2020
 * Author: Shawn Hymel
 * License: 0BSD
 */

// Needed for atoi()
#include <Arduino.h>
#include <stdlib.h>
#include <AccelStepper.h>

// Use only core 1 for demo purposes
#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

// Settings
static const uint8_t buf_len = 20;

// Pins
static const int led_pin = LED_BUILTIN;

// Globals
static int led_delay = 500; // ms

//*****************************************************************************
// Tasks

// Task: Blink LED at rate set by global variable
void toggleLED(void *parameter)
{
  while (1)
  {
    ledcWrite(0, 127);
  }
}

// Task: Read from serial terminal
// Feel free to use Serial.readString() or Serial.parseInt(). I'm going to show
// it with atoi() in case you're doing this in a non-Arduino environment. You'd
// also need to replace Serial with your own UART code for non-Arduino.
AccelStepper stepper(AccelStepper::DRIVER, 4, 13);

void readSerial(void *parameters){

  char c;
  char buf[buf_len];
  uint8_t idx = 0;

  // Clear whole buffer
  memset(buf, 0, buf_len);

  // Loop forever
  while (1)
  {
    // Read characters from serial
    if (Serial.available() > 0)
    {
      c = Serial.read();
      // Update delay variable and reset buffer if we get a newline character
      if (c == '\n')
      {
        led_delay = atoi(buf);
        stepper.setSpeed(led_delay);
        Serial.print("Updated speed to: ");
        Serial.println(led_delay);
        memset(buf, 0, buf_len);
        idx = 0;
      }
      else if (c == 'w')
      {
        led_delay += 100;
        ledcChangeFrequency(0, led_delay, 8);
      }
      else if (c == 's' && led_delay > 20)
      {
        led_delay -= 100;
        ledcChangeFrequency(0, led_delay, 8);
      }
      else if (c == 'r')
      {
        Serial.println(led_delay);
      }
      else if (c == 'd')
      {
        ledcDetachPin(led_pin);
      }
      else if (c == 'e')
      {
        ledcAttachPin(led_pin, 0);
      }
      else if (c == 'a')
      {
        digitalWrite(12, 1);
      }
      else if (c == 'q')
      {
        digitalWrite(12, 0);
      }
      else if (c != 's')
      {
        // Only append if index is not over message limit
        if (idx < buf_len - 1)
        {
          buf[idx] = c;
          idx++;
        }
      }
    }
  }
}

//*****************************************************************************
// Main


void acel(void *parameter)
{
  while (1)
  {
    stepper.setMaxSpeed(5000);
    stepper.setSpeed(1000);
    stepper.setAcceleration(1000);
    stepper.runToNewPosition(6400*10);
    stepper.runToNewPosition(0);
  }
}

void setup()
{

  // Configure pin
  pinMode(12, OUTPUT);
  pinMode(5, OUTPUT);
  digitalWrite(5, 1);
  ledcSetup(0, 10, 8);
  // Configure serial and wait a second
  Serial.begin(115200);
  vTaskDelay(1000 / portTICK_PERIOD_MS);
  Serial.println("Multi-task stepper Demo");
  Serial.println("Press Enter for start");

  // Start blink task
  while (1)
  {
    if (Serial.available() > 0)
    {
      char c = Serial.read();
      if (c == '\n')
      {
        break;
      }
    }
  }
  Serial.println("setting up tasks..");

  /*xTaskCreatePinnedToCore( // Use xTaskCreate() in vanilla FreeRTOS
      toggleLED,           // Function to be called
      "Toggle LED",        // Name of task
      1024,                // Stack size (bytes in ESP32, words in FreeRTOS)
      NULL,                // Parameter to pass
      1,                   // Task priority
      NULL,                // Task handle
      app_cpu);   */
  // Run on one core for demo purposes (ESP32 only)

  // Start serial read task
  /*xTaskCreatePinnedToCore( // Use xTaskCreate() in vanilla FreeRTOS
      readSerial,          // Function to be called
      "Read Serial",       // Name of task
      2048,                // Stack size (bytes in ESP32, words in FreeRTOS)
      NULL,                // Parameter to pass
      1,                   // Task priority (must be same to prevent lockup)
      NULL,                // Task handle
      tskNO_AFFINITY);*/   
  // Run on one core for demo purposes (ESP32 only)
  xTaskCreatePinnedToCore(
      acel,
      "acel",
      10000,
      NULL,
      2,
      NULL,
      1);
  // Delete "setup and loop" task
  Serial.println("***tasks are running***");
  vTaskDelete(NULL);
}

void loop()
{
  // Execution should never get here
}